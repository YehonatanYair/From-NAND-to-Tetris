// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screenMap, powersOf2;
	static boolean color;
	
    /** Initializes the Screen. */
    function void init() {
		let screenMap = 16384;
		let color = ~0;
		let powersOf2 = Array.new(16);
		let powersOf2[0] = 1;
		let powersOf2[1] = 2;
		let powersOf2[2] = 4;
		let powersOf2[3] = 8;
		let powersOf2[4] = 16;
		let powersOf2[5] = 32;
		let powersOf2[6] = 64;
		let powersOf2[7] = 128;
		let powersOf2[8] = 256;
		let powersOf2[9] = 512;
		let powersOf2[10] = 1024;
		let powersOf2[11] = 2048;
		let powersOf2[12] = 4096;
		let powersOf2[13] = 8192;
		let powersOf2[14] = 16384;
		let powersOf2[15] = 32767 + 1;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		while(i < 8192){
			let screenMap[i] = 0;
			let i = i + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int temp, modulo, addr, mask;
		if((x < 0) | (x > 511) | (y < 0) | (y > 255)){
			do Sys.error(61);
		}
		let mask = powersOf2[(x & 15)];
		let temp = x / 16;
		let modulo = x - (temp * 16);
		let addr = (y * 32) + temp;
		
		if(color){
            let screenMap[addr] = screenMap[addr] | mask;
        }
		else{
            let screenMap[addr] = screenMap[addr] & ~mask;
        }
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a, b, diff, dx, dy;
		if((x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255)){
			do Sys.error(62);
		}
		if(x1 = x2){
			do Screen.drawVertical(y1, y2, x1);
			return;
		}
		if(y1 = y2){
			do Screen.drawHorizontal(x1, x2, y1);
			return;
		}
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))){
			if((y2 < y1) & (x2 < x1)){
				do Screen.drawPixel(x1 - a, y1 - b);
			}
			else{
				if(y2 < y1){
					do Screen.drawPixel(x1 + a, y1 - b);
				}
				else{
					if(x2 < x1){
						do Screen.drawPixel(x1 - a, y1 + b);
					}
					else{
						do Screen.drawPixel(x1 + a, y1 + b);
					}
				}
			}
			
			if((diff < 0) | (diff = 0)){
				let a = a + 1;
				let diff = diff + dy;
			}
			else{
				let b = b + 1;
				let diff = diff - dx;
			}
		}
		return;
    }
	
	/** Draws a horizontal line from pixel (x1,y) to pixel (x2,y), using the current color. */
	function void drawHorizontal(int x1, int x2, int y){
		var int xmin, xmax;
		let xmin = Math.min(x1, x2);
		let xmax = Math.max(x1, x2) + 1;
		while(xmin < xmax){
			do Screen.drawPixel(xmin, y);
			let xmin = xmin + 1;
		}
		return;
	}
	
	/** Draws a vertical line from pixel (x,y1) to pixel (x,y2), using the current color. */
	function void drawVertical(int y1, int y2, int x){
		var int ymin, ymax;
		let ymin = Math.min(y1, y2); 
		let ymax = Math.max(y1, y2) + 1;
		while(ymin < ymax){
			do Screen.drawPixel(x, ymin);
			let ymin = ymin + 1;
		}
		return;
	}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		if((x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255) | (x1 > x2) | (y1 > y2)){
			do Sys.error(63);
		}
		while(x1 < (x2 + 1)) {
            do Screen.drawLine(x1, y1, x1, y2);
            let x1 = x1 + 1;
        }
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dx, dy;
        var int rr;
		if((x < 0) | (x > 511) | (y < 0) | (y > 255) | (r > 181)){
			do Sys.error(64);
		}
        let rr = r*r;
        let dy = -r;
        while(dy < (r + 1)) {
            do Screen.drawLine(x - Math.sqrt(rr - (dy * dy)), y + dy, x + Math.sqrt(rr - (dy * dy)), y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
