// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array powersOf2;

	/** Initializes the library. */
	function void init() {
		let powersOf2 = Array.new(16);
		let powersOf2[0] = 1;
		let powersOf2[1] = 2;
		let powersOf2[2] = 4;
		let powersOf2[3] = 8;
		let powersOf2[4] = 16;
		let powersOf2[5] = 32;
		let powersOf2[6] = 64;
		let powersOf2[7] = 128;
		let powersOf2[8] = 256;
		let powersOf2[9] = 512;
		let powersOf2[10] = 1024;
		let powersOf2[11] = 2048;
		let powersOf2[12] = 4096;
		let powersOf2[13] = 8192;
		let powersOf2[14] = 16384;
		let powersOf2[15] = 32767 + 1;
		return;
	}

	/** Returns the absolute value of x. */
	function int abs(int x) {
		if(x < 0){
			let x = -x;
		}
		return x;
	}

	/** Returns the product of x and y. 
	*  When a Jack compiler detects the multiplication operator '*' in the 
	*  program's code, it handles it by invoking this method. In other words,
	*  the Jack expressions x*y and multiply(x,y) return the same value.
	*/
	function int multiply(int x, int y) {
		var int sum, shiftedX, bit, po2; 
		if((x = 0) | (y = 0)){
			return 0;
		}
		let sum = 0;
		let shiftedX = x;
		let bit = 0;
		while(bit < 16){
			let po2 = powersOf2[bit];
			if((y & po2) = po2){
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let bit = bit + 1;
		}
		return sum;
	}

	/** Returns the integer part of x/y.
	*  When a Jack compiler detects the multiplication operator '/' in the 
	*  program's code, it handles it by invoking this method. In other words,
	*  the Jack expressions x/y and divide(x,y) return the same value.
	*/
	function int divide(int x, int y) {
		var int res, absX, absY;
		if(y=0){
			do Sys.error(31);
		}
		let absX = Math.abs(x);
		let absY = Math.abs(y);
		if(absY > absX){
			return 0;
		}
		let res = Math.divideAlgo(absX,absY);
		if((x < 0) & (y < 0)){
			return res;
		}
		if((x < 0) | (y < 0)){
			return -res;
		}
		return res;
	}
	
	function int divideAlgo(int x, int y) {
		var int q;
		if((y > x) | (y < 0)){
			return 0;
		}
		let q = Math.divideAlgo(x, (y + y));
		if((x -((q + q) * y)) < y){
			return (q+q);
		}
		return (q + q + 1);
	}

	/** Returns the integer part of the square root of x. */
	function int sqrt(int x) {
		var int y, j;
		if(x < 0){
			do Sys.error(32);
		}
		let y = 0;
		let j = 7;
		while(j > -1){
			if(((((y + powersOf2[j])*(y + powersOf2[j])) < x) | (((y + powersOf2[j])*(y + powersOf2[j])) = x)) & (((y + powersOf2[j])*(y + powersOf2[j])) > 0)){
				let y = y + powersOf2[j];
			}
			let j = j - 1;
			
		}
		return y;
	}

	/** Returns the greater number. */
	function int max(int a, int b) {
		if(a > b){
			let b = a;
		}
		return b;
	}

	/** Returns the smaller number. */
	function int min(int a, int b) {
		if(a < b){
			let b = a;
		}
		return b;
	}
	
	/** Returns powersOf2 array. */
	function Array powersOf2() {
		return powersOf2;
	}
}
