// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field int strMLength, strLength;
	field Array str;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength < 0){
			do Sys.error(71);
		}
		if(maxLength > 0){
			let str = Array.new(maxLength);
		}
		let strMLength = maxLength;
		let strLength = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if(strMLength > 0){
			do str.dispose();
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return strLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if((j < 0) | (j > strLength) | (j = strLength)){
			do Sys.error(72);
		}
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if((j < 0) | (j > strLength) | (j = strLength)){
			do Sys.error(73);
		}
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(strLength = strMLength){
			do Sys.error(74);
		}
		let str[strLength] = c;
		let strLength = strLength + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(strLength = 0){
			do Sys.error(75);
		}
		let strLength = strLength - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int i, val, d;
		var boolean isDigit, isNegative;	
		if(strLength = 0){
			return 0;
		}
		let isDigit = ~0;
		if(str[0] = 45){
			let isNegative = ~0;
			let i = 1;
		}
		while((i < strLength) & (isDigit)){
			let d = str[i] - 48;
			let isDigit = ~((d < 0) | (d > 9));
			if(isDigit){
				let val = (val * 10) + d;
				let i = i + 1;
			}
		}
		if(isNegative){
			let val = -val;
		}
		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int i, digits;
		var Array tempArr;
		var boolean isNegative;
		if(strMLength = 0 ){
			do Sys.error(76);
		}
		let tempArr = Array.new(6);
		if(val < 0){
			let isNegative = ~0;
			let val = -val;
		}
		let digits = val;
		while(digits > 0){
			let digits = val / 10;
			let tempArr[i] = 48 + val -(digits * 10);
			let i = i + 1;
			let val = digits;
		}
		if(isNegative){
			let tempArr[i] = 45;
			let i = i + 1;
		}
		if(strMLength < i){
			do Sys.error(77);
		}
		if(i = 0){
			let str[0] = 48;
			let strLength = 1;
		}
		else{
			let strLength = 0;
			while(strLength < i){
				let str[strLength] = tempArr[i - (strLength + 1)];
				let strLength = strLength + 1;
			}
		}
		do tempArr.dispose();
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
